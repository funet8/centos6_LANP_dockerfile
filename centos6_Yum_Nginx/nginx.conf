user  www  www;
worker_processes  auto; 
#worker_cpu_affinity 0001;

error_log  /var/log/nginx/nginx_error.log  crit;
# 用来指定进程id的存储文件位置
pid        /var/run/nginx.pid;
 
# 用于绑定worker进程和CPU，该值必须和Linux内核打开文件数关联起来，如将该值设置为65535就必须在Linux命令行中执行 ulimit -HSn 65535
worker_rlimit_nofile 65535;

events {
	use epoll;
    worker_connections  65535;
	multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/nginx_access.log  main;
	###自定义访问日志类型
	log_format  main_aliyun  '$request_time - IP:$remote_addr - RealIP:$http_x_forwarded_for - [$time_local] $request - $status - $http_user_agent - $host - from:$http_referer';
    
	log_format  main_wscdn  '$request_time - IP:$remote_addr - RealIP:$HTTP_CDN_SRC_IP - [$time_local] $request - $status - $http_user_agent - $host - from:$http_referer';
	
	log_format  main_zdy  '$request_time - IP:$remote_addr - RealIP:$http_x_forwarded_for - [$time_local] $request - $status - $http_user_agent - $host - from:$http_referer';

	# 是否开启高效文件传输模式，将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞
     sendfile        on;
     tcp_nopush     on;
     tcp_nodelay  on;
 
     # 隐藏nginx的版本显示，增强安全性
     server_tokens off;
 
     # 用于设置客户端连接保持活动的超时时间，单位为秒，默认为75s
     #keepalive_timeout  0;
     keepalive_timeout  30;
     # 用于指定响应客户端的超时时间，这个超时仅限于两个连接活动之间的时间，默认为60s
     #send_timeout 60;
 
     # 下面是FastCGI的优化指令
     # 连接到后端FastCGI的超时时间
     fastcgi_connect_timeout 300;
     # 向FastCGI传送请求的超时时间
     fastcgi_send_timeout 300;
     # 接收FastCGI应答的超时时间
     fastcgi_read_timeout 300;
     # 指定读取FastCGI应答第一部分需要多大的缓冲区
     fastcgi_buffer_size 64k;
     fastcgi_buffers 4 64k;
     # 默认值是fastcgi_buffers的两倍
     fastcgi_busy_buffers_size 128k;
     # 表示在写入缓存文件时使用多大的数据块，默认为fastcgi_buffers的两倍
     fastcgi_temp_file_write_size 128k;
     # 为FastCGI缓存指定一个文件路径、目录结构等级、关键字区域存储时间和非活动删除时间
     #fastcgi_cache_path /usr/local/nginx/fastcgi_cache levels=1:2 keys_zone=TEST:10m inactive=5m;
     # 开启FastCGI缓存并为其设定一个名称。开启缓存可以有效降低CPU的负载，并且防止502错误的发生。
     # 但是同时也会引起很多问题，要视具体情况而定
     #fastcgi_cache TEST;
     # 用来指定应答代码的缓存时间，下面三条指令表示将200和303应答缓存1小时，301应答缓存1天，其他应答缓存1分钟。
     #fastcgi_cache_valid 200 302 1h;
     #fastcgi_cache_valid 301 1d;
     #fastcgi_cache_valid any 1m;
 
     # 配置Nginx的HttpGzip模块，开通的前提是安装的时候启用了该模块，使用 /usr/local/nginx/sbin/nginx -V 来查看安装的信息（大写的V）
     # 是否开通gzip
     gzip  on;
     # 允许压缩的页面最小字节数
     gzip_min_length 1k;
     gzip_buffers 4 16k;
     gzip_http_version 1.1;
     # 压缩比，从1到9，越大压缩率越高但越占资源，默认为1
     gzip_comp_level 4;
     # 指定压缩的类型，text/html总是被压缩
     gzip_types text/plain application/x-javascript text/css application/xml;
     # 是否让浏览器缓存压缩过的数据，默认为off
     gzip_vary on;
 
	client_max_body_size 20m;
	
     # server 用于对虚拟主机的设置，建议每个站点的设置放到外部配置文件中，然后使用include进行引用
     # 这里设置一个默认的主机，当默认访问的时候返回403错误
     #server {
         #listen       80 default;
         #server_name _;
         # 也可以修改成404或者500，根据自身情况进行设置
         #return 403;
     #}
	 
	include /etc/nginx/conf.d/nginx_*;	
	
## 以$binary_remote_addr作为Key，每个IP地址最多有50个并发，超过则返回503
limit_conn_zone $binary_remote_addr zone=TotalConnLimitZone:10m ;
limit_conn  TotalConnLimitZone  50;
limit_conn_log_level notice;

##以$binary_remote_addr作为Key，每个IP地址每秒处理10个请求，超出返回503错误
limit_req_zone $binary_remote_addr zone=ConnLimitZone:10m  rate=20r/s;
limit_req_log_level notice;
}
